<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="Prime.Services.PrimeService">
  <Summary>
    <Class>Prime.Services.PrimeService</Class>
    <Assembly>PrimeService</Assembly>
    <Files>
      <File>C:\Users\rtimbo\source\repos\samples\core\getting-started\unit-testing-using-dotnet-test\PrimeService\PrimeService.cs</File>
    </Files>
    <Coveredlines>12</Coveredlines>
    <Uncoveredlines>5</Uncoveredlines>
    <Coverablelines>17</Coverablelines>
    <Totallines>30</Totallines>
    <Linecoverage>70.5%</Linecoverage>
    <Branchcoverage>100%</Branchcoverage>
  </Summary>
  <Metrics>
    <Element name="IsPrime">
      <Cyclomaticcomplexity>6</Cyclomaticcomplexity>
      <NPathcomplexity>0</NPathcomplexity>
      <Sequencecoverage>1</Sequencecoverage>
      <Branchcoverage>1</Branchcoverage>
    </Element>
    <Element name="DoNotCoverMe">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <NPathcomplexity>0</NPathcomplexity>
      <Sequencecoverage>0</Sequencecoverage>
      <Branchcoverage>1</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="C:\Users\rtimbo\source\repos\samples\core\getting-started\unit-testing-using-dotnet-test\PrimeService\PrimeService.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System;" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace Prime.Services" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public class PrimeService" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public bool IsPrime(int candidate)" />
      <LineAnalysis line="8" visits="11" coverage="Covered" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="9" visits="11" coverage="Covered" coveredbranches="2" totalbranches="2" content="            if (candidate &lt; 2)" />
      <LineAnalysis line="10" visits="3" coverage="Covered" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="11" visits="3" coverage="Covered" coveredbranches="" totalbranches="" content="                return false;" />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="13" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="14" visits="22" coverage="Covered" coveredbranches="2" totalbranches="2" content="            for (var divisor = 2; divisor &lt;= Math.Sqrt(candidate); divisor++)" />
      <LineAnalysis line="15" visits="7" coverage="Covered" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="16" visits="7" coverage="Covered" coveredbranches="2" totalbranches="2" content="                if (candidate % divisor == 0)" />
      <LineAnalysis line="17" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                {" />
      <LineAnalysis line="18" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                    return false;" />
      <LineAnalysis line="19" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                }" />
      <LineAnalysis line="20" visits="3" coverage="Covered" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="21" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="            return true;" />
      <LineAnalysis line="22" visits="11" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="23" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="24" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public void DoNotCoverMe() {" />
      <LineAnalysis line="25" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            var foo = &quot;bar&quot;;" />
      <LineAnalysis line="26" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            foo = &quot;foobar&quot;;" />
      <LineAnalysis line="27" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            return;" />
      <LineAnalysis line="28" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="29" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="30" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>